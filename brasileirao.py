# -*- coding: utf-8 -*-
"""Brasileirao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltWhi0kJZe9g1GEOpg6ke8kUKYXAsOUe
"""

#https://github.com/thiagorsena/base_tcc/blob/main/campeonato-brasileiro-full.csv

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict, Counter

#Load dataset
url = "https://raw.githubusercontent.com/thiagorsena/base_tcc/refs/heads/main/campeonato-brasileiro-full.csv"

df = pd.read_csv(url)

df.head()

df.dtypes

df.head()

df.isnull().sum()

df.drop(['Horário', 'Dia'], axis=1, inplace = True)
df.head()

df.dtypes

df['Data'] = pd.to_datetime(df['Data'])
df = df[df['Data'].dt.year >= 2003]

def change_winner_name(row):
    if (row['Vencedor'] == row['Clube 1']):
        return 0
    elif (row['Vencedor'] == row['Clube 2']):
        return 1
    else:
        return 2

df['Vencedor'] = df.apply(change_winner_name, axis=1)

df.drop(['Clube 1 Estado', 'Clube 2 Estado', 'Estado Clube Vencedor'], axis=1, inplace = True)

df.reset_index(drop=True, inplace = True)

df.head()

df['Rodada'] = [int(x.split('ª')[0]) for x in df['Rodada'].values]

df['Clube 1'] = [x.lower() for x in df['Clube 1'].values]
df['Clube 2'] = [x.lower() for x in df['Clube 2'].values]

df.head()

df.shape

df['Temporada'] = df['Data'].dt.year

df['Temporada']

pd.options.mode.chained_assignment = None

temporadas = df['Temporada'].value_counts().index.sort_values().values

df['Wins Home Team'] = df['Clube 1']
df['Wins Away Team'] = df['Clube 1']

df['Loss Home Team'] = df['Clube 1']
df['Loss Away Team'] = df['Clube 1']

df['Draw Home Team'] = df['Clube 1']
df['Draw Away Team'] = df['Clube 1']

for temporada in  temporadas:
    dft = df[df['Temporada'] == temporada]

    for index, row in dft.iterrows():
        df_home = dft[(dft['Rodada'] < row['Rodada']) & (dft['Clube 1'] == row['Clube 1'])]
        c1_wins = 0
        c1_loss = 0
        c1_draw = 0
        for index2, row2 in df_home.iterrows():
            if row2['Vencedor'] == 0:
                c1_wins+=1
            elif row2['Vencedor'] == 1:
                c1_loss+=1
            elif row2['Vencedor'] == 2:
                c1_draw+=1

        df_away = dft[(dft['Rodada'] < row['Rodada']) & (dft['Clube 2'] == row['Clube 1'])]
        for index2, row2 in df_away.iterrows():
            if row2['Vencedor'] == 1:
                c1_wins+=1
            elif row2['Vencedor'] == 0:
                c1_loss+=1
            elif row2['Vencedor'] == 2:
                c1_draw+=1


        df_home = dft[(dft['Rodada'] < row['Rodada']) & (dft['Clube 1'] == row['Clube 2'])]
        c2_wins = 0
        c2_loss = 0
        c2_draw = 0
        for index2, row2 in df_home.iterrows():
            if row2['Vencedor'] == 0:
                c2_wins+=1
            elif row2['Vencedor'] == 1:
                c2_loss+=1
            elif row2['Vencedor'] == 2:
                c2_draw+=1

        df_away = dft[(dft['Rodada'] < row['Rodada']) & (dft['Clube 2'] == row['Clube 2'])]
        for index2, row2 in df_away.iterrows():
            if row2['Vencedor'] == 1:
                c2_wins+=1
            elif row2['Vencedor'] == 0:
                c2_loss+=1
            elif row2['Vencedor'] == 2:
                c2_draw+=1


        df.at[index, 'Wins Home Team'] = c1_wins
        df.at[index, 'Wins Away Team'] = c2_wins

        df.at[index, 'Loss Home Team'] = c1_loss
        df.at[index, 'Loss Away Team'] = c2_loss

        df.at[index, 'Draw Home Team'] = c1_draw
        df.at[index, 'Draw Away Team'] = c2_draw

df.tail()

def find_wins_home(ser):
    wins = [0]

    [wins.append(wins[-1]+1) if win==0 else wins.append(wins[-1]) for win in ser.values]

    return wins[0:-1]

def find_wins_away(ser):
    wins = [0]

    [wins.append(wins[-1]+1) if win==1 else wins.append(wins[-1]) for win in ser.values]

    return wins[0:-1]

def find_draws(ser):
    wins = [0]

    [wins.append(wins[-1]+1) if win==2 else wins.append(wins[-1]) for win in ser.values]

    return wins[0:-1]

df['Wins Home Home Team'] = df.groupby(['Temporada', 'Clube 1'])['Vencedor'].transform(lambda x: find_wins_home(x))
df['Loss Home Home Team'] = df.groupby(['Temporada', 'Clube 1'])['Vencedor'].transform(lambda x: find_wins_away(x))
df['Wins Away Away Team'] = df.groupby(['Temporada', 'Clube 2'])['Vencedor'].transform(lambda x: find_wins_away(x))
df['Loss Away Away Team'] = df.groupby(['Temporada', 'Clube 2'])['Vencedor'].transform(lambda x: find_wins_home(x))
df['Draws Home Home Team'] = df.groupby(['Temporada', 'Clube 1'])['Vencedor'].transform(lambda x: find_draws(x))
df['Draws Away Away Team'] = df.groupby(['Temporada', 'Clube 2'])['Vencedor'].transform(lambda x: find_draws(x))

df.tail()

df['Home Wins'] = [1 if x == 0 else 0 for x in df['Vencedor'].values]
df['Away Wins'] = [1 if x == 1 else 0 for x in df['Vencedor'].values]

df.head()

def find_streak(ser):
    streak = [0]

    [streak.append(streak[-1]+1) if win==1 else streak.append(0) for win in ser.values]

    return streak[0:-1]

df['Home Winning Streak'] = df.groupby(['Temporada', 'Clube 1'])['Home Wins'].transform(lambda x: find_streak(x))

df['Home Losing Streak'] = df.groupby(['Temporada', 'Clube 1'])['Away Wins'].transform(lambda x: find_streak(x))
df['Away Winning Streak'] = df.groupby(['Temporada', 'Clube 2'])['Away Wins'].transform(lambda x: find_streak(x))
df['Away Losing Streak'] = df.groupby(['Temporada', 'Clube 2'])['Home Wins'].transform(lambda x: find_streak(x))

df.tail()

df.drop(['Home Wins', 'Away Wins'], inplace=True, axis=1)

df.head()

def find_goals(ser):
    goals = [0]

    [goals.append(goals[-1]+goal) for goal in ser.values]

    return goals[0:-1]

df['Goals Scored at Home'] = df.groupby(['Temporada', 'Clube 1'])['Clube 1 Gols'].transform(lambda x: find_goals(x))
df['Goals Conceded at Home'] = df.groupby(['Temporada', 'Clube 1'])['Clube 2 Gols'].transform(lambda x: find_goals(x))

df['Goals Scored Away'] = df.groupby(['Temporada', 'Clube 2'])['Clube 2 Gols'].transform(lambda x: find_goals(x))
df['Goals Conceded Away'] = df.groupby(['Temporada', 'Clube 2'])['Clube 1 Gols'].transform(lambda x: find_goals(x))

df.tail()

import math
temporadas = df['Temporada'].value_counts().index.sort_values().values


df['Days Between'] = 0
df['Days Between Away'] = 0


for temporada in temporadas:
    dft = df[df['Temporada'] == temporada]

    for index, row in dft.iterrows():
        dfc = dft[(dft['Data'] <= row['Data']) & ((dft['Clube 1'] == row['Clube 1']) | (dft['Clube 2'] == row['Clube 1']))]
        days_bet = ((dfc['Data'] - dfc['Data'].shift()).dt.days).values[-1]
        if math.isnan(days_bet):
            df.at[index, 'Days Between'] = 5
        else:
            df.at[index, 'Days Between'] = days_bet

        dfc = dft[(dft['Data'] <= row['Data']) & ((dft['Clube 1'] == row['Clube 2']) | (dft['Clube 2'] == row['Clube 2']))]
        days_bet_away = ((dfc['Data'] - dfc['Data'].shift()).dt.days).values[-1]
        if math.isnan(days_bet_away):
            df.at[index, 'Days Between Away'] = 5
        else:
            df.at[index, 'Days Between Away'] = days_bet_away

df.tail()

df.head()

temporadas = df['Temporada'].value_counts().index.sort_values().values

df['Is Promoted'] = 0
df['Is Promoted Away'] = 0

for temporada in temporadas[1:]:
    dft = df[df['Temporada'] == temporada]

    dfw = df[df['Temporada'] == temporada-1]

    for index, row in dft.iterrows():
        last_year_clubs = dfw['Clube 1'].value_counts().index.sort_values().values

        home_club = row['Clube 1']
        if home_club in last_year_clubs:
            df.at[index, 'Is Promoted'] = 0
        else:
            df.at[index, 'Is Promoted'] = 1

        away_club = row['Clube 2']
        if away_club in last_year_clubs:
            df.at[index, 'Is Promoted Away'] = 0
        else:
            df.at[index, 'Is Promoted Away'] = 1

df.tail(20)

df.head()

df['Home Agnst'] = 0
df['Away Agnst'] = 0
df['Draws Agnst'] = 0

clubs = df['Clube 1'].value_counts().index.sort_values().values

for club1 in clubs:
    for club2 in clubs:
        dfc = df[((df['Clube 1'] == club1) & (df['Clube 2'] == club2)) | ((df['Clube 2'] == club1) & (df['Clube 1'] == club2))]
        win_home = 0
        win_away = 0
        draws = 0
        for index, row in dfc.iterrows():
            df.at[index, 'Home Agnst'] = win_home
            df.at[index, 'Away Agnst'] = win_away
            df.at[index, 'Draws Agnst'] = draws

            if row['Vencedor'] == 0:
                win_home +=1
            elif row['Vencedor'] == 1:
                win_away +=1
            else:
                draws+=1

df.tail()

df.columns

df.shape

target = 'Vencedor'
features = list(df.columns.values[9:])

len(features)

df.dtypes

df[[target]+features] = df[[target]+features].astype(int)

"""Análise gráfica"""

sns.set(style="ticks", color_codes=True)
plt.rcParams['figure.figsize'] = (8,5)
plt.rcParams['figure.dpi'] = 150

ax = sns.boxplot(x="variable", y="value", data=pd.melt(df[features]))
ax.set_xticklabels(ax.get_xticklabels(),rotation=90)
plt.show()

cols = [target]+features

df_useful = df[cols]
corr = df_useful.corr(method='pearson')

sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)
plt.show()

cols = ['Clube 1 Gols', 'Clube 2 Gols']+features

df_useful = df[cols]
corr = df_useful.corr(method='pearson')

sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns)
plt.show()

"""Modelo 1: PCA + Naive Bayes Classifier"""

from sklearn import preprocessing
from sklearn.decomposition import PCA
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split

X = df[features]
y = df[target]

scaler = preprocessing.StandardScaler()

scaler.fit(X)
X_scaled = scaler.transform(X)

pca = PCA(n_components=5)
pca.fit(X_scaled)
X_pca = pca.transform(X_scaled)

X_pca_df = pd.DataFrame(X_pca, columns=['V1', 'V2', 'V3', 'V4', 'V5'])
X_pca_df.tail()

sns.set(style='ticks', color_codes=True)
sns.pairplot(X_pca_df, kind='reg')
plt.show()

X_train, X_test, y_train, y_test = train_test_split(X_pca_df, y, random_state=0, test_size=0.3)

clf = GaussianNB()

clf.fit(X_train, y_train)

print('Train score: {:.3f}'.format(clf.score(X_train, y_train)))
print('Test score: {:.3f}'.format(clf.score(X_test, y_test)))

from sklearn.metrics import confusion_matrix

y_pred = clf.predict(X_test)

cm = confusion_matrix(y_test, y_pred)

df_cm = pd.DataFrame(cm, index=['Vitória Mandante', 'Vitória Visitante', 'Empate'],
                    columns=['Vitória Mandante', 'Vitória Visitante', 'Empate'])

sns.heatmap(df_cm, annot=True)
plt.show()

proba_df = pd.DataFrame(clf.predict_proba(X_test))
df_r = df.loc[X_test.index,['Clube 1', 'Clube 2', 'Vencedor']].reset_index(drop=True)

df_rp = df_r.merge(proba_df, left_index=True, right_index=True)
df_rp.tail()

"""Modelo 2: PCA + MLP"""

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(random_state=42)

mlp.fit(X_train, y_train)

print('Train score: {:.3f}'.format(mlp.score(X_train, y_train)))
print('Test score: {:.3f}'.format(mlp.score(X_test, y_test)))

y_pred = mlp.predict(X_test)

cm = confusion_matrix(y_test, y_pred)

df_cm = pd.DataFrame(cm, index=['Vitória Mandante', 'Vitória Visitante', 'Empate'],
                    columns=['Vitória Mandante', 'Vitória Visitante', 'Empate'])

sns.heatmap(df_cm, annot=True)
plt.show()

proba_df = pd.DataFrame(mlp.predict_proba(X_test))
df_r = df.loc[X_test.index,['Clube 1', 'Clube 2', 'Vencedor']].reset_index(drop=True)

df_rp = df_r.merge(proba_df, left_index=True, right_index=True)
df_rp.tail()